# Agentify - A lightweight TypeScript framework for building AI agents with tools

Agentify provides a simple, extensible framework for creating AI agents powered by language models. It follows a plugin-based architecture inspired by Fastify, allowing developers to build and compose agents with specialized tools.

## Core

### Agentify
The main framework that creates your application instance. It provides methods for registering plugins and decorating the instance with additional functionality.

```typescript
import Agentify from "./core/agentify";

const app = Agentify();
```

Key methods:
- `register()`: Add plugins to extend functionality
- `decorate()`: Add custom properties to the instance
- `addHook()`: Register lifecycle event handlers
- `executeHook()`: Trigger lifecycle events
- `ready()`: Signal application readiness
- `start()`: Start the application

### Plugins
The plugin system is the primary way to extend Agentify's functionality:

```typescript
// Register core plugins
app.register(agentPlugin);
app.register(toolPlugin);

// Register provider plugins
app.register(openaiPlugin, {
  apiKey: process.env.OPENAI_API_KEY,
});

app.register(anthropicPlugin, {
  apiKey: process.env.ANTHROPIC_API_KEY,
});
```

### Hooks
Lifecycle hooks for application events:

```typescript
app.addHook('onReady', async () => {
  console.log('App is ready!');
});

app.addHook('onClose', async () => {
  console.log('Shutting down...');
});
```

## Main Components

### Tools
Tools are atomic functions that agents can use to perform specific tasks. They have a name, description, parameters schema (using Zod), and an execute function.

```typescript
// Create a tool with Zod schema validation
const fetchUsersTool = app.tools.create({
  name: "fetch_users",
  description: "Fetch users from the database by name",
  parameters: z.object({
    firstName: z.string().optional(),
    lastName: z.string().optional(),
  }),
  execute: async (args) => {
    // Implementation
    return users;
  },
});
```

Available tool methods:
- `tools.create()`: Register a new tool
- `tools.list()`: List all registered tools
- `tools.get()`: Get a specific tool by name
- `tools.print()`: Print all registered tools

### Agents
Agents are the main actors that can use tools to perform complex tasks. They can be powered by different LLM providers.

```typescript
// Create an agent with tools
const agent = app.agents.create({
  name: "Greeting Specialist",
  description: "Greet users with personalized messages",
  tools: [fetchUsersTool, greetTool],
  options: {
    model: "gpt-4o-mini", // Specify which model to use
  },
});

// Use the agent
const result = await agent.do("Greet John Smith");
```

Available agent methods:
- `agents.create()`: Register a new agent
- `agents.list()`: List all registered agents
- `agents.get()`: Get a specific agent by name
- `agents.print()`: Print all registered agents

## LLM Providers
Agentify supports multiple LLM providers through plugins:

### OpenAI
```typescript
app.register(openaiPlugin, {
  apiKey: process.env.OPENAI_API_KEY,
});

// Access the OpenAI client
const response = await app.openai.chat.completions.create({
  model: "gpt-3.5-turbo",
  messages: [{ role: "user", content: "Hello!" }],
});
```

### Anthropic
```typescript
app.register(anthropicPlugin, {
  apiKey: process.env.ANTHROPIC_API_KEY,
});

// Access the Anthropic client
const response = await app.anthropic.messages.create({
  model: "claude-3-sonnet-20240229",
  messages: [{ role: "user", content: "Hello!" }],
});
```

## Development Status
Agentify is in early development. Current features:
- Plugin system with hooks
- Tool creation with Zod schema validation
- Agent creation with LLM-powered tool execution
- OpenAI and Anthropic provider integrations

Future features:
- Task and workflow orchestration
- Memory and state management
- More provider integrations
- Evaluation frameworks